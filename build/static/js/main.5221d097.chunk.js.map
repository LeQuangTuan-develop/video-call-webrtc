{"version":3,"sources":["config/webrtc-config.js","App.jsx","serviceWorker.js","index.js"],"names":["pc_config","urls","username","credential","App","props","componentDidMount","socket","io","connect","path","query","on","success","console","log","sdp","type","setState","state","isCallee","isCall","isCaller","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","close","isClickedAnswer","camera","mic","RTCPeerConnection","connectCall","sendToPeer","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","then","setLocalDescription","createAnswer","cancelCall","onOffCam","stream","getVideoTracks","enabled","onOffMic","getAudioTracks","onicecandidate","e","oniceconnectionstatechange","ontrack","remoteVideoref","current","srcObject","streams","navigator","mediaDevices","getUserMedia","audio","video","options","mirror","localVideoref","getTracks","track","addTrack","catch","React","createRef","this","className","ref","autoPlay","muted","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5221d097.chunk.js","sourcesContent":["export const pc_config = {\r\n    \"iceServers\": [\r\n        {\r\n            urls: [\r\n                \"stun:stun.l.google.com:19302\",\r\n                \"stun:stun2.l.google.com:19302\",\r\n                \"stun:stun.l.google.com:19302\",\r\n                \"stun:stun3.l.google.com:19302\",\r\n                \"stun:stun4.l.google.com:19302\",\r\n                \"stun:stun.services.mozilla.com\"\r\n            ]\r\n        },\r\n        // {\r\n        //   urls: ['turn:numb.viagenie.ca'],\r\n        //   credential: '123456',\r\n        //   username: 'tuanlqps14736@fpt.edu.vn'\r\n        // },\r\n        {\r\n            urls: [ \"stun:ss-turn1.xirsys.com\" ]\r\n        }, \r\n        {\r\n            username: \"K98R0xENxW54u-O075JEYFK27Z1hnafXlbfs83lHCC-Eo0NccDFa6fZ8C06minMCAAAAAGFH2rJMVExpZXU=\",\r\n            credential: \"abb53402-19ac-11ec-82dc-0242ac140004\",\r\n            urls: [\r\n                \"turn:ss-turn1.xirsys.com:80?transport=udp\",\r\n                \"turn:ss-turn1.xirsys.com:3478?transport=udp\",\r\n                \"turn:ss-turn1.xirsys.com:80?transport=tcp\",\r\n                \"turn:ss-turn1.xirsys.com:3478?transport=tcp\",\r\n                \"turns:ss-turn1.xirsys.com:443?transport=tcp\",\r\n                \"turns:ss-turn1.xirsys.com:5349?transport=tcp\"\r\n            ]\r\n        }\r\n    ],\r\n    // iceTransportPolicy: \"relay\"\r\n}","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport io from 'socket.io-client'\r\nimport {pc_config} from './config/webrtc-config'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    // https://reactjs.org/docs/refs-and-the-dom.html\r\n    this.localVideoref = React.createRef()\r\n    this.remoteVideoref = React.createRef()\r\n\r\n    this.state = {\r\n      isCall: false,\r\n      isClickedAnswer: false,\r\n      isCallee: false,\r\n      camera: true,\r\n      mic: false\r\n    }\r\n\r\n    this.socket = null\r\n    this.pc = null\r\n    this.stream = null\r\n  }\r\n\r\n  componentDidMount = () => {\r\n\r\n    this.socket = io.connect(\r\n      '/webrtcPeer',\r\n      {\r\n        path: '/io/webrtc',\r\n        query: {}\r\n      }\r\n    )\r\n\r\n    this.socket.on('connection-success', success => {\r\n      console.log(\"Kết nối thành công\", success)\r\n    })\r\n\r\n    this.socket.on('offerOrAnswer', (sdp) => {\r\n      // this.textref.value = JSON.stringify(sdp)\r\n      \r\n      console.log(sdp.type);\r\n      if (sdp.type === \"offer\") {\r\n        this.setState({\r\n          ...this.state,\r\n          isCallee: true,\r\n          isCall: true\r\n        })\r\n      } \r\n\r\n      if (sdp.type === \"answer\") {\r\n        this.setState({\r\n          ...this.state,\r\n          isCaller: true\r\n        })\r\n      }\r\n      console.log(\"set remote description\");\r\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\r\n    })\r\n\r\n    this.socket.on('candidate', (candidate) => {\r\n      console.log(\"add candidate vào máy local\");\r\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n    })\r\n\r\n    this.socket.on('stopCall', (candidate) => {\r\n      console.log(\"Hủy kết nối\");\r\n      this.pc.close()\r\n      this.setState({\r\n        isCall: false,\r\n        isClickedAnswer: false,\r\n        isCallee: null,\r\n        camera: true,\r\n        mic: false\r\n      })\r\n      this.pc = new RTCPeerConnection(pc_config)\r\n      this.connectCall()\r\n    })\r\n\r\n    this.pc = new RTCPeerConnection(pc_config)\r\n    this.connectCall()\r\n  }\r\n\r\n  sendToPeer = (messageType, payload) => {\r\n    this.socket.emit(messageType, {\r\n      socketID: this.socket.id,\r\n      payload\r\n    })\r\n  }\r\n\r\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\r\n\r\n  createOffer = () => {\r\n    console.log('Offer')\r\n    this.setState({\r\n      ...this.state,\r\n      isCall: true\r\n    })\r\n    this.pc.createOffer({ offerToReceiveVideo: 1 })\r\n      .then(sdp => {\r\n        console.log(\"set local sdp và gửi sdp\");\r\n        this.pc.setLocalDescription(sdp)\r\n\r\n        this.sendToPeer('offerOrAnswer', sdp)\r\n      })\r\n  }\r\n\r\n  createAnswer = () => {\r\n    console.log('Answer')\r\n    this.setState({\r\n      ...this.state,\r\n      isClickedAnswer: true\r\n    })\r\n    this.pc.createAnswer({ offerToReceiveVideo: 1 })\r\n      .then(sdp => {\r\n        console.log(\"set local sdp và gửi sdp\");\r\n        this.pc.setLocalDescription(sdp)\r\n\r\n        this.sendToPeer('offerOrAnswer', sdp)\r\n      })\r\n  }\r\n\r\n  cancelCall= () => {\r\n    console.log(\"Hủy\");\r\n    this.pc.close()\r\n    this.sendToPeer(\"stopCall\", null)\r\n    this.setState({\r\n      isCall: false,\r\n      isClickedAnswer: false,\r\n      isCallee: null,\r\n      camera: true,\r\n      mic: false\r\n    })\r\n    this.pc = new RTCPeerConnection(pc_config)\r\n    this.connectCall()\r\n    // this.remoteVideoref.current.srcObject = null;\r\n  }\r\n\r\n  onOffCam = () => {\r\n    this.stream.getVideoTracks()[0].enabled = !this.state.camera\r\n    this.setState({\r\n      ...this.state,\r\n      camera: !this.state.camera\r\n    })\r\n  }\r\n\r\n  onOffMic = () => {\r\n    this.stream.getAudioTracks()[0].enabled = !this.state.mic\r\n    this.setState({\r\n      ...this.state,\r\n      mic: !this.state.mic\r\n    })\r\n  }\r\n\r\n  connectCall = () => {\r\n    // triggered when a new candidate is returned\r\n    this.pc.onicecandidate = (e) => {\r\n      if (e.candidate) {\r\n        console.log(\"gửi candidate cho máy khác\")\r\n        this.sendToPeer('candidate', e.candidate)\r\n      }\r\n    }\r\n\r\n    // triggered when there is a change in connection state\r\n    this.pc.oniceconnectionstatechange = (e) => {\r\n      console.log(\"thiết lập thành công\", e)\r\n    }\r\n\r\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\r\n    // this.pc.onaddstream = (e) => {\r\n    //   this.remoteVideoref.current.srcObject = e.stream\r\n    // }\r\n\r\n    this.pc.ontrack = (e) => {\r\n      console.log(\"nhận dòng video\");\r\n      this.remoteVideoref.current.srcObject = e.streams[0]\r\n    }\r\n\r\n    // getUserMedia() returns a MediaStream object \r\n    const success = (stream) => {\r\n      this.stream = stream\r\n      this.localVideoref.current.srcObject = stream\r\n      for (const track of stream.getTracks()) {\r\n        this.pc.addTrack(track, stream);\r\n      }\r\n    }\r\n\r\n    const failure = (e) => {\r\n      console.log('getUserMedia Error: ', e)\r\n    }\r\n\r\n    const constraints = {\r\n      audio: true,\r\n      video: true,\r\n      // video: {\r\n      //   width: 1280,\r\n      //   height: 720\r\n      // },\r\n      // video: {\r\n      //   width: { min: 1280 },\r\n      // }\r\n      options: {\r\n        mirror: true,\r\n      }\r\n    }\r\n\r\n    navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(success)\r\n      .catch(failure)\r\n  }\r\n\r\n  render() {\r\n    const {isCall, isCallee, isClickedAnswer} = this.state\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"video-container\">\r\n          <div className=\"videoBox\">\r\n            <video\r\n              className=\"videoLocal\"\r\n              ref={this.localVideoref}\r\n              autoPlay muted>\r\n            </video>\r\n            <video\r\n              className=\"videoRemote\"\r\n              ref={this.remoteVideoref}\r\n              autoPlay>\r\n            </video>\r\n            <div className=\"button-group\">\r\n              {!isCall && <button className=\"button-call btn-call\" onClick={this.createOffer}>Gọi</button>}\r\n              {!isClickedAnswer && isCallee && <button className=\"button-call btn-answer\" onClick={this.createAnswer}>Trả lời</button>}\r\n              {isCall && <button className=\"button-call btn-cancel\" onClick={this.cancelCall}>Hủy</button>}\r\n              {isCall && <button className=\"button-call btn-camera\" onClick={this.onOffCam}>Cam</button>}\r\n              {isCall && <button className=\"button-call btn-audio\" onClick={this.onOffMic}>Mic</button>}\r\n            </div>\r\n          </div>\r\n          {/* <textarea style={{ width: 450, height: 40, display: \"none\" }} ref={ref => { this.textref = ref }} /> */}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}